import uuid
from datetime import datetime
from flask import Flask, request, jsonify


"""
flask --app app --debug run
    A. One point for every alphanumeric character in the retailer name.
    B. 50 points if the total is a round dollar amount with no cents.
    C. 25 points if the total is a multiple of 0.25.
    D. 5 points for every two items on the receipt.
    E. If the trimmed length of the item description is a multiple of 3, 
        multiply the price by 0.2 and round up to the nearest integer.
        The result is the number of points earned.
    F. 6 points if the day in the purchase date is odd.
    G. 10 points if the time of purchase is after 2:00pm and before 4:00pm.
"""

app = Flask(__name__)

# Dictionary to hold points, key == uuid, value == total points
point_holder_dict = dict()

def get_alphaNum_chars_A(phrase):
    total = 0
    for char in phrase: # A
        if char.isalnum():
            total += 1
    return total

def total_has_no_cents_B(price):
    if (((price)*100) % 100) == 0:
        return True
    return False

def total_multiple_of_quarter_C(price):
    if (((price)*100) % 25) == 0:
        return True
    return False

def calc_item_points_E(item_list):
    total = 0
    for item in item_list: # E
        item_desc = item.get('shortDescription',-1)
        
        if len(item_desc.strip()) % 3 == 0:
            item_price = item.get('price',0)
            # To have less imports:
            # Convert to float and multiply .2 
            # then use int division which will round down (hence why negative)
            # Finally change back to positive int and add to total_points
            total += int(-(-(float(item_price) * .2) // 1))
            
    return total

def is_odd_date_F(date):
    # trying not to import too many things but
    # I was not sure if we needed to check the format of the date
    date_format = '%Y-%m-%d'
    try:
        print(date)
        res = (datetime.strptime(date, date_format))
        print(res, res.day % 2 == 1)
        if (res.day % 2 == 1):
            return True
    except:
        return False
    return False

def between_times_G(actual_time):
    if actual_time > 1400 and actual_time < 1600:
        return True
    return False

@app.get('/')
def home():
    return "Possible Routes: [POST]: /receipts/process ,  [GET]: /receipts/<id>/points"

"""
POST
Takes in a JSON receipt (see example in the example directory) 
and returns a JSON object with an ID generated by your code.

Payload: Receipt JSON

Returns:
    "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" (UUID - String)
"""
@app.post('/receipts/process')
def process_receipts():
    total_points = 0
    
    receipt_payload = request.get_json()
    
    retailer = receipt_payload.get('retailer', None)
    items = receipt_payload.get('items', None)
    total = receipt_payload.get('total', None)
    purchase_date = receipt_payload.get('purchaseDate', None)
    purchase_time = receipt_payload.get('purchaseTime', None)

    # Quick check that nothing is empty
    if None in [retailer, items, total, purchase_date, purchase_time]:
        # Error
        return "Error with Payload", 400
    
    total_points += get_alphaNum_chars_A(retailer)

    if total_has_no_cents_B(float(total)):
        total_points += 50
        
    if total_multiple_of_quarter_C:
        total_points += 25

    total_points += (len(items) // 2) * 5 # D

    total_points += calc_item_points_E(items)
    
    print(purchase_date)
    if is_odd_date_F(purchase_date):
        total_points += 6

    time_int  = int(purchase_time.split(':')[0]+purchase_time.split(':')[1])
    
    if between_times_G(time_int):
        total_points += 10
        
    new_uuid = str(uuid.uuid4())
    point_holder_dict[new_uuid] = total_points
    
    # Jsonify returns JSON response as well as the appropriate status code and content type
    return jsonify({"id": new_uuid})

@app.get('/receipts/<id>/points')
def get_points(id):
    receipt_uuid = id
    
    if receipt_uuid not in point_holder_dict.keys():
        # Error
        return "UUID not found", 400
    
    return jsonify({"points": point_holder_dict[receipt_uuid]})